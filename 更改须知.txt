新电脑部署命令
git config --global user.name "ssln5014"
git config --global user.email "2285740204@qq.com"
ssh-keygen -t rsa -C "2285740204@qq.com"
ssh -T git@github.com
ssln5014
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
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_rsa
git clone git@github.com:ssln5014/ssln5014.github.io.git
npm install hexo-cli -g
npm install
npm install hexo-deployer-git --sav
npm uninstall hexo-renderer-marked --save
npm install hexo-renderer-kramed --save
npm install hexo-butterfly-tag-plugins-plus --save

npm install cheerio@0.22.0 --save

npm install hexo
hexo init
npm install
npm install hexo-deployer-git

hexo clean && hexo g && hexo s


git rm --cache themes/butterfly

git add .
git commit -m "..."
git push origin hexo

hexo clean && hexo g && hexo s
git config --global core.autocrlf false
hexo clean && hexo g && hexo s
ssln5014
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



换了电脑如何使用hexo继续写博客

操作步骤
一、安装必要软件
安装 Git 客户端

安装 node JS

二、在 github 官网添加新电脑产生的密钥
参考我的另一篇文章：hexo上部署博客到Github失败

三、源文件拷贝
将你原来电脑上个人博客目录下必要文件拷到你的新电脑上（比如F:/Blog目录下），注意无需拷全部，只拷如下几个目录：

_config.yml
 package.json
 scaffolds/
 source/
 themes/
四、安装 hexo
在 cmd 下输入下面指令安装 hexo：

npm install hexo-cli -g
五、进入 F:/Blog 目录（你拷贝到新电脑的目录），输入下面指令安装相关模块
npm install
npm install hexo-deployer-git --save  // 文章部署到 git 的模块
（下面为选择安装）
npm install hexo-generator-feed --save  // 建立 RSS 订阅
npm install hexo-generator-sitemap --save // 建立站点地图
六、测试
这时候使用 hexo s 基本可以看到你新添加的文章了。
七、部署发布文章
hexo clean   // 清除缓存 网页正常情况下可以忽略此条命令
hexo g       // 生成静态网页
hexo d       // 开始部署
 八、Github 添加 SSH Keys
 首先在本地创建 SSH Keys:

$ ssh-keygen -t rsa -C "2285740204@qq.com"

后面的邮箱即为 github 注册邮箱，也是你登录 Github 的邮箱，之后会要求确认路径和输入密码，一路回车就行。

成功的话会在 ~/下生成 .ssh文件夹，进去，打开 id_rsa.pub，复制里面的key即可。

输入 eval "$(ssh-agent -s)" ，添加密钥到ssh-agent，再输入 ssh-add ~/.ssh/id_rsa ，添加生成的SSH key到ssh-agent

JaJian@DESKTOP-H2C0ES1 MINGW64 /d/hexo
$ eval "$(ssh-agent -s)"
Agent pid 5516
JaJian@DESKTOP-H2C0ES1 MINGW64 /d/hexo
$ ssh-add ~/.ssh/id_rsa
Identity added: /c/Users/JaJian/.ssh/id_rsa (/c/Users/JaJian/.ssh/id_rsa)
JaJian@DESKTOP-H2C0ES1 MINGW64 /d/hexo
$ clip < ~/.ssh/id_rsa.pub
然后我们再次测试下公钥有没有添加成功：ssh -T git@github.com

JaJian@DESKTOP-H2C0ES1 MINGW64 /d/hexo
$ ssh -T git@github.com
The authenticity of host 'github.com (13.229.188.59)' can't be established.
RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'github.com,13.229.188.59' (RSA) to the list of known hosts.
Hi noobgod! You've successfully authenticated, but GitHub does not provide shell access.
成功了。

之后我们再次部署我们的博客网站：hexo d



使用hexo，如果换了电脑怎么更新博客？
其实，Hexo生成的文件里面是有一个.gitignore的，所以它的本意应该也是想我们把这些文件放到GitHub上存放的。但是考虑到如果每个GitHub Pages都需要额外的一个仓库存放这些文件，就显得特别冗余了。这个时候就可以用分支的思路！一个分支用来存放Hexo生成的网站原始的文件，另一个分支用来存放生成的静态网页。
最近我也用GitHub Pages搭建了一个独立博客，想到了这个方法，使用之后真的特别简洁。为了更直观地说明，奉上使用这种方法不同时候的流程：
----------------------------------------------------------- 华丽的分割线1 ----------------------------------------------------------
一、关于搭建的流程
1. 创建仓库，http://ssln5014.github.io；
2. 创建两个分支：master 与 hexo；
3. 设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；
4. 使用git clone git@github.com:ssln5014/ssln5014.github.io.git拷贝仓库；
5. 在本地ssln5014.github.io文件夹下通过Git bash依次执行npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;
6. 修改_config.yml中的deploy参数，分支应为main；
7. 依次执行
git add .
git commit -m "..."
git push origin hexo
提交网站相关的文件；
8. 执行hexo g -d生成网站并部署到GitHub上。
这样一来，在GitHub上的http://ssln5014.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！
二、关于日常的改动流程
在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理。
1. 依次执行git add .
git commit -m "..."
git push origin hexo
指令将改动推送到GitHub（此时当前分支应为hexo）；
2. 然后才执行hexo g -d发布网站到master分支上。
虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催....的情况，调转顺序就有问题了）。
三、本地资料丢失后的流程
1. 使用git clone git@github.com:ssln5014/ssln5014.github.io.git拷贝仓库（默认分支为hexo）；
2. 在本地新拷贝的http://ssln5014.github.io文件夹下通过Git bash依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。
---------------------------------------------------------- 华丽的分割线2 ----------------------------------------------------------
以上就是我采用的方法，虽说文字有点多，但是我个人觉得真的挺高效和简洁的。更详细的可以参考我刚写的博文：